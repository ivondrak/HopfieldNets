from hopfield_net import HopfieldNet, BoltzmannMachine
from data_set import DataSet

# patterns = [
#     [
#     [0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 1, 0, 0, 0],
#     [0, 0, 1, 1, 0, 0, 0],
#     [0, 1, 0, 1, 0, 0, 0],
#     [0, 0, 0, 1, 0, 0, 0],
#     [0, 0, 0, 1, 0, 0, 0],
#     [0, 0, 0, 1, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0],
#     ],
#     [
#     [0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 1, 1, 1, 0, 0],
#     [0, 1, 0, 0, 0, 1, 0],
#     [0, 0, 0, 0, 1, 0, 0],
#     [0, 0, 0, 1, 0, 0, 0],
#     [0, 0, 1, 0, 0, 0, 0],
#     [0, 1, 1, 1, 1, 1, 0],
#     [0, 0, 0, 0, 0, 0, 0],
#     ],
#     [
#     [0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 1, 1, 1, 0, 0],
#     [0, 1, 0, 0, 0, 1, 0],
#     [0, 0, 0, 1, 1, 0, 0],
#     [0, 0, 0, 0, 0, 1, 0],
#     [0, 1, 0, 0, 0, 1, 0],
#     [0, 0, 1, 1, 1, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0],
#     ],
# ]

# inputs = [
#     [
#     [0, 0, 0, 0, 0, 0, 0],
#     [0, 1, 0, 1, 0, 0, 1],
#     [0, 0, 1, 1, 0, 0, 0],
#     [0, 1, 0, 1, 0, 0, 0],
#     [0, 0, 0, 1, 1, 0, 0],
#     [0, 0, 0, 1, 0, 0, 0],
#     [0, 0, 0, 0, 1, 0, 0],
#     [0, 0, 0, 0, 0, 0, 1],
#     ],
#     [
#     [1, 0, 0, 0, 0, 0, 0],
#     [1, 0, 0, 0, 1, 0, 0],
#     [1, 1, 0, 0, 0, 1, 0],
#     [0, 0, 0, 0, 1, 1, 0],
#     [0, 0, 0, 1, 0, 0, 0],
#     [0, 0, 1, 0, 1, 0, 0],
#     [0, 1, 1, 1, 1, 1, 0],
#     [0, 0, 1, 0, 1, 0, 0],
#     ],
#     [
#     [1, 1, 0, 0, 1, 0, 0],
#     [0, 0, 1, 1, 1, 0, 0],
#     [0, 1, 0, 0, 0, 1, 0],
#     [0, 0, 0, 1, 1, 0, 0],
#     [1, 0, 0, 0, 0, 1, 0],
#     [0, 1, 0, 0, 0, 1, 0],
#     [0, 1, 1, 1, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0],
#     ],
# ]

patterns = [
    [
    [0, 0, 1, 0, 0, 0, 0],
    [0, 1, 1, 0, 0, 0, 0],
    [1, 0, 1, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0],
    ],
    [
    [0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 0, 0],
    [0, 1, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 1, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0],
    ],
    [
    [0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 0],
    [0, 0, 1, 0, 0, 0, 1],
    [0, 0, 0, 0, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 1],
    [0, 0, 1, 0, 0, 0, 1],
    [0, 0, 0, 1, 1, 1, 0],
    ]
]

inputs = [
    [
    [1, 0, 1, 0, 0, 1, 0],
    [0, 1, 1, 0, 0, 0, 0],
    [1, 0, 1, 0, 0, 0, 0],
    [0, 0, 1, 0, 1, 0, 0],
    [0, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0],
    ],
    [
    [1, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 1, 0, 0],
    [1, 1, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 1, 0],
    [0, 0, 0, 1, 0, 0, 0],
    [0, 0, 1, 0, 1, 0, 0],
    [0, 1, 1, 1, 1, 1, 0],
    [0, 0, 1, 0, 1, 0, 0],
    ],
    [
    [0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 0, 0, 1, 0],
    [0, 0, 0, 1, 1, 1, 0],
    [0, 0, 1, 0, 0, 0, 1],
    [0, 0, 0, 0, 1, 1, 0],
    [0, 1, 0, 0, 0, 0, 1],
    [0, 0, 1, 0, 0, 0, 1],
    [0, 0, 1, 1, 0, 1, 0],
    ]
]

if __name__ == "__main__":
    training_set = DataSet(8, 7)
    print("Patterns:")
    for pattern in patterns:
        training_set.add_pattern(pattern)
    training_set.display_patterns()

    hopfield_net = HopfieldNet(training_set.num_neurons)
    hopfield_net.train(training_set.patterns)

    print("Inputs:")
    input_set = DataSet(8, 7)
    for input_pattern in inputs:
        input_set.add_pattern(input_pattern)
    input_set.display_patterns()

    print("Results:")
    result_set = DataSet(8, 7)
    for i in range(len(input_set.patterns)):
        result = hopfield_net.run(input_set.patterns[i], max_cycles=10)
        result_set.patterns.append(result)
    result_set.display_patterns()

